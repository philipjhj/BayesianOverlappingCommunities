classdef GibbsSampler
    properties
        % Input
        A % Data Matrix
        T % Total # of samples
        Tstart=1; % Changes if error occurs to resume sampling
        pms % Hyperparameters (current)
        d % Number of communities
        k % k-flip parameter
        zTrue % Generated Z matrix (if available)
        qTrue % Generated Q matrix (if available)
        iters % iteration variables for loops
        % iters(1) = samples
        % iters(2) =
        % iters(3) =
        
        % Settings
        testError = false;
        ActiveGibbs = true;
        NotConstrained = true;
        activeHyper = true;
        hyperindex = [];
        
        % Output
        zSamples % Samples generated by gibbs
        qSamples % Samples generated by gibbs
        pmsSamples % Samples generated by gibbs
        logPs % Log probability of samples
        SuffStatAll % SuffStats
        cpuTime
        wallTime
    end
    methods
        % Constructs
        function obj = GibbsSampler(A,T,d,k,pms,Z,Q)
            obj.A = A;
            obj.d = d;
            obj.k = k;
            obj.pms = pms;
            if nargin > 5
                obj.zTrue = Z;
                obj.qTrue = Q;
            end
            obj.T = T;
            obj.logPs = nan(3,T);
            obj.pmsSamples = cell(1,T);
            obj.SuffStatAll = cell(1,T);
            obj.zSamples = cell(1,T);
            obj.qSamples = cell(1,T);
            obj.cpuTime = zeros(1,T+1);
            obj.wallTime = zeros(1,T);
        end
        % Sampler
        function obj = Sampler(obj,nSamples)
        end
        %function obj = posteriorpredictive(...)
        
        % Update functions
        % Extending data structures to accomendate new samples
        function obj = updateT(obj,newT)
            oldT = obj.T;
            if oldT<newT
                obj.Tstart = oldT+1; % Setting index for first sample
                obj.T = newT;
                obj.logPs = [obj.logPs nan(3,newT-oldT)];
                obj.pmsSamples{newT} = [];
                obj.SuffStatAll{newT} = [];
                obj.zSamples{newT} = [];
                obj.qSamples{newT} = [];
                obj.cpuTime(newT) = 0;
                obj.wallTime(newT) = 0;
            end
        end
        
        % Results
        % function MAP plot
        
        % function AUC
        
        % Compare exact clusterings?
        
        % ...
    end
end