classdef GibbsSampler
    properties
        % Input
        A % Data Matrix
        T=0; % Total # of samples
        Tstart=0; % Changes if error occurs to resume sampling
        pms % Hyperparameters (current)
        d % Number of communities
        k % k-flip parameter
        zTrue % Generated Z matrix (if available)
        qTrue % Generated Q matrix (if available)
        MissingData % Indices of missing data
        
        % Settings
        Debug = false;
        ActiveGibbs = true;
        NotConstrained = true;
        activeHyper = true;
        hyperindex = [];
        verbose = true;
        
        % Output
        zSamples % Samples generated by gibbs
        qSamples % Samples generated by gibbs
        pmsSamples % Samples generated by gibbs
        logPs % Log probability of samples
        SuffStatAll % SuffStats
        cpuTime
        wallTime
        PostPredDistMat% Posterior Predictive Distribution
    end
    methods
        % Constructor
        function obj = GibbsSampler(A,d,k,pms,Z,Q)
            if nargin == 0; % default values
                
                obs = 10; % No. of observations
                feas = 10; % No. of features
                obj.d = 3; % No. of concepts
                obj.k = 2; % No. used in k-flip
                
                bs = [1 2];
                rs = [1 2];
                
                pas = [1 0.1]; % pa_plus, pa_minus
                pbs = [0.1 1]; % pb_plus, pb_minus
                rng(1)
                [obj.A,obj.zTrue,obj.qTrue] = GenerateDataFromModel(obs,feas,obj.d,bs,rs,pas,pbs);
                obj.pms = [bs; rs; pas; pbs;];%Parameters
                obj.PostPredDistMat = zeros(size(obj.A));
            else
                obj.A = A;
                obj.d = d;
                obj.k = k;
                obj.PostPredDistMat = zeros(size(obj.A));
                if nargin < 4
                    % default pms if no other given
                    obj.pms = [1 1; 1 1; 1 1; 1 1];
                else
                    obj.pms = pms;
                    if nargin > 5
                        % if know Z and Q exists (synthetic data)
                        obj.zTrue = Z;
                        obj.qTrue = Q;
                    end
                end
            end
        end
        
        % Sampler (See class folder for function)
        output = Sampler(obj,nSamples)
        
        output = PosteriorPredictive(obj)
        
        % Update functions
        % Extending data structures to accomendate new samples
        function obj = updateT(obj,nSamples)
            obj.Tstart = obj.T+1;
            obj.T = obj.T+nSamples;
            %             if oldT<newT
            % Setting index for first sample
            %                 obj.T = newT;
            obj.logPs = [obj.logPs nan(3,nSamples)];
            obj.pmsSamples{nSamples} = [];
            obj.SuffStatAll{nSamples} = [];
            obj.zSamples{nSamples} = [];
            obj.qSamples{nSamples} = [];
            obj.cpuTime(nSamples) = 0;
            obj.wallTime(nSamples) = 0;
        end
        % Create missing data
        function createMissingdata(obj)
            
        end
    end
    
  
end